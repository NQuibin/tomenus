frameworkVersion: '2'

service: tomenus
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-offline:
    allowCache: false
    useChildProcesses: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      dbPath: local/
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      menus:
        sources:
          - table: menus_${self:provider.stage}
            sources: [./seed/menus.json]
  useDynamoLocal:
    dev: true
    prd: false

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 512
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:ConditionCheck
        - dynamodb:DescribeTable
      Resource:
        - { 'Fn::GetAtt': ['MenusTable', 'Arn' ] }
        - Fn::Join:
            - '/'
            - - { 'Fn::GetAtt': ['MenusTable', 'Arn' ] }
              - 'index/*'

resources:
  Resources:
    MenusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: menus_${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: primary_category
            AttributeType: S
          - AttributeName: area
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: index_by_primary_category_${self:provider.stage}
            Projection:
              ProjectionType: ALL
            KeySchema:
              - AttributeName: primary_category
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
          - IndexName: index_by_area_${self:provider.stage}
            Projection:
              ProjectionType: ALL
            KeySchema:
              - AttributeName: area
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
          - IndexName: index_by_status_${self:provider.stage}
            Projection:
              ProjectionType: ALL
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

default-env: &default-env
  ENV: ${self:provider.stage}
  USE_DYNAMODB_LOCAL: ${self:custom.useDynamoLocal.${self:provider.stage}}

functions:
  GetMenus:
    handler: menus.controller.get_menus
    events:
      - http:
          method: GET
          path: v1/menus
    environment:
      <<: *default-env
  GetMenu:
    handler: menus.controller.get_menu
    events:
      - http:
          method: GET
          path: v1/menus/{id}
    environment:
      <<: *default-env
  CreateMenu:
    handler: menus.controller.create_menu
    events:
      - http:
          method: POST
          path: v1/menus
    environment:
      <<: *default-env
