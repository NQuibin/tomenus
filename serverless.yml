frameworkVersion: '2'

service: tomenus
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
#  - serverless-dynamodb-local
  - serverless-python-requirements
  - serverless-offline

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 512
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:ConditionCheck
        - dynamodb:DescribeTable
      Resource:
        - { 'Fn::GetAtt': ['MenusTable', 'Arn' ] }
        - Fn::Join:
            - '/'
            - - { 'Fn::GetAtt': ['MenusTable', 'Arn' ] }
              - 'index/*'

custom:
  serverless-offline:
    allowCache: false
    useChildProcesses: true

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  GetMenus:
    handler: menus.controller.get_menus
    events:
      - http:
          method: GET
          path: v1/menus
  GetMenus:
    handler: menus.controller.get_menu
    events:
      - http:
          method: GET
          path: v1/menus/{id}

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    MenusTable:
      Type: AWS::DynamoDB:Table
      Properties:
        TableName: menus_${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: type
            AttributeType: S
          - AttributeName: neighbourhood
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: index_by_type_${self:provider.stage}
            Projection:
              ProjectionType: ALL
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: type
                KeyType: RANGE
          - IndexName: index_by_neighbourhood_${self:provider.stage}
            Projection:
              ProjectionType: ALL
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: neighbourhood
                KeyType: RANGE
